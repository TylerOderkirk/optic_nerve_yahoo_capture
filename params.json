{"name":"Optic nerve yahoo capture","tagline":"How NSA/GCHQ collects images from Yahoo Messenger webcam feeds","body":"### Introduction\r\nIn early 2014 Edward Snowden revealed that British intelligence services had been collecting webcam images sent by Yahoo Messenger users worldwide.\r\n\r\nYahoo Messenger has two features which employ a webcam:\r\n\r\n1. \"Webcam Feed\" (my term). Available since v5.0.0.1066 (Nov 2001). Users can \"invite\" others to view a live video stream from another user. Audio is not transmitted.\r\n2. \"Video Chat\". Available since v10.0.0.525 (Mar 2010). Users can initiate a \"Video Call\" to converse with live video and audio.\r\n\r\nWe'll discuss feature #2 at another time.\r\n\r\nFor now, let's take a look at feature #1 and how they might have extracted images from packet captures.\r\n\r\n### Background\r\nThe [report by the Guardian](http://www.theguardian.com/world/2014/feb/27/gchq-nsa-webcam-images-internet-yahoo) indicates that the GCHQ program responsible, Optic Nerve, was active from sometime in 2008 until at least sometime in 2012.\r\n\r\nI've been trying to break instant messenger clients since resource-editing AOL Instant Messenger's rich text editor component in the late nineties, so I was naturally curious about how difficult it was to do this.\r\n\r\n### Laboratory set-up\r\nHere's how I configured my lab:\r\n\r\n1. Downloaded Yahoo Messenger client v9.0.0.2018 (released Oct 2008), on a hunch that it was vulnerable.\r\n2. Installed the client on two Windows XP VirtualBox Virtual Machines: \"VM1\" and \"VM2\" with bridged-mode networking on two separate host machines. I had no luck configuring the ActiveX image capture stack nor the \"devenum\" trick in [WINE](http://www.winehq.org/).\r\n3. Created two Yahoo accounts via the client's GUI.\r\n4. Installed the [SplitCam](http://www.splitcamera.com) v6.6.41 \"webcam emulator\" on both VMs. I didn't want to muck around with Host->Guest USB pass-through to use physical webcams.\r\n\r\n### Capturing packets\r\nNext I captured some packets sent between clients during a video chat session. See Appendix A for some screenshots of the clients.\r\n\r\n1. Downloaded the first two small AVI files ([1](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/fractogene.avi), [2](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/airhorse.avi)) I could find on the web and configured SplitCam to use each as a video source on VM1 and VM2 respectively.\r\n2. Started a [Wireshark](http://www.wireshark.org) packet capture on the host of VM1.\r\n3. Logged in on both clients using my two new Yahoo accounts.\r\n4. Chose \"Invite user to view my webcam\" on VM1.\r\n5. Accepted request on VM2.\r\n6. Chose \"Invite user to view my webcam\" on VM2.\r\n7. Accepted request on VM1.\r\n8. Waited about 10 seconds for some image frames to be transferred.\r\n9. Stopped and saved the packet capture in \"Wireshark/tcpdump/...\" pcap format (not pcapng).\r\n\r\nHere's the resulting [400KB packet capture](9002018_webcam_feed_bidirectional_only_5100.pcap).\r\n\r\nBy law in the USA, you need permission to capture packets on a networks you don't own. I've only used this tool on my test network. Please see the LICENSE file for additional disclaimers.\r\n\r\n### Locating image data\r\n\r\nA quick inspection of the capture in Wireshark, confirmed by an \"Endpoints\" Analysis, revealed that many TCP packets were sent from port 5100 on each machine.\r\n\r\n![myalt](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/images/endpoints_by_packets.png)\r\n\r\nMany of these packets contained the string `Kadadu-3.2`. Searching the web turned up [Kakadu Software](http://www.kakadusoftware.com/) - creators of \"the world's leading JPEG2000 developer toolkit\".\r\n\r\nSure enough the first 4 bytes of these packets, `ff 4f ff 51`, is the \"magic\" sequence for an \"unwrapped\" JPEG2000 \"code stream\". I confirmed this with \"Export selected packet bytes\" and the file(1) utility.\r\n\r\n![myalt](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/images/jp2_codestream_consider_cloudshark.png)\r\n\r\nI found that [IrfanView](http://www.irfanview.com/) v4.37 for Windows can display JPEG200 codestreams, but didn't immediately find an option for Linux. \r\n\r\n### Automating image extraction\r\nLet's write a script that will extract these codestreams and save them to disk as PNGs.\r\n\r\nMany tools exist to \"carve\" files from a packet capture based on signatures: NetworkMiner, Foremost, Ettercap, flowgrep, Xplico, Driftnet, Wireshark with a dissector, tcpextract, and others. I wrote one from scratch in Python for a few reasons:\r\n\r\n1. To support multiple platforms - I've tested the script on Windows XP SP3, Ubuntu 13.10, and openSUSE 13.1.\r\n2. For a learning experience - I wanted to try capturing from a \"live\" interface in addition to reading a packet capture from disk.\r\n3. Other tools weren't easily extensible - we need to call a codestream->PNG conversion utility for each image extracted.\r\n\r\nThe script uses the [dpkt library](https://code.google.com/p/dpkt/) from Dug Song and Jon Oberheide to parse ethernet frames and the [Glymur library](https://github.com/quintusdias/glymur) to process JPEG2000 data.\r\n\r\nYou can view the script with syntax highlighting [here](https://github.com/TylerOderkirk/optic_nerve_yahoo_capture/blob/master/optic_nerve_yahoo_capture.py) and download it [here](https://github.com/TylerOderkirk/optic_nerve_yahoo_capture/raw/master/optic_nerve_yahoo_capture.py). \r\n\r\nIf you're really impatient, I've created a virtual machine with all necessary libraries installed. The script and the .pcap file from above are in `/root`. Use 'root'/'linux' to log in. 350MB compressed/1GB uncompressed [VMX/VMDK](https://susestudio.com/download/46131388765088bbe50d3844d33e6acd/optic_nerve_yahoo_capture_1.i686-0.0.6.vmx.tar.gz) and [OVF](https://susestudio.com/download/2769c23fc4565e73c376a02439fb4c22/optic_nerve_yahoo_capture_1.i686-0.0.6.ovf.tar.gz) images tested with VMWare Player v6.0.2 build-1744117 and Virtualbox 4.2.16_Ubuntu r86992 respectively. [This](https://susestudio.com/appliance/1192535/configuration/0.0.6) is the [SUSE Studio](https://susestudio.com/) configuration used to create the above images.\r\n\r\n```\r\n$ ./pcap_parser.py --help\r\nusage: pcap_parser.py [-h] [-i NETWORK_INTERFACE] [-f PCAPFILE]\r\n\r\nExtracts JPEG 2000 Yahoo Messenger webcam images from given pcap file or given\r\nnetwork interface and writes them to the current directory as PNG images named\r\nin this form: PKTNUM-SRCIP-DSTIP-YYYYMMDD-HHMMSS.bmp where PKTNUM is the\r\npacket number from the capture/interface, SRCIP is the source IP address,\r\nDSTIP is the destination IP address, and YYYYMMDD-HHMMSS is the time and date\r\nthe image was captured.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n\r\nInput:\r\n  -i NETWORK_INTERFACE  Network interface to sniff packets from (e.g. 'wlan0')\r\n  -f PCAPFILE           PCAP file to read packets from (e.g. 'foo.pcap')\r\n```\r\n\r\nHere's what you'll see if you feed it the .pcap file provided in \"Capturing packets\" above:\r\n\r\n```\r\n$ ./pcap_parser.py -f 9002018_webcam_feed_bidirectional_only_5100.pcap\r\n[...]\r\nencountered potential yahoo messenger webcam feed data in packet number 26\r\n pkt_timestamp: 1400251938.79 pkt_src: 192.168.1.247 pkt_dst: 192.168.1.238\r\n data: ff:4f:ff:51:00:2f:00:00:00:00:01:40:00:00:00:f0:00:00:00:00 +[...]\r\n encountered beginning of new codestream\r\n writing previous codestream (size 4160 ) to /tmp/tmpuRR3dO.jpc\r\n wrapping previous codestream and writing it to /tmp/tmpfWKGPG.jp2\r\n writing PNG to 26-192.168.1.247-192.168.1.238-20140516_105218.png\r\nencountered potential yahoo messenger webcam feed data in packet number 27\r\n[...]\r\n```\r\n\r\nExtracted and converted images are written to the current directory: \r\n\r\n```\r\n$ ls\r\ntotal 8972\r\n100-192.168.1.247-192.168.1.238-20140516_105223.png\r\n109-192.168.1.247-192.168.1.238-20140516_105223.png\r\n114-192.168.1.247-192.168.1.238-20140516_105224.png\r\n120-192.168.1.247-192.168.1.238-20140516_105224.png\r\n126-192.168.1.247-192.168.1.238-20140516_105225.png\r\n[...]\r\n```\r\n### Vulnerability timeline\r\n\r\nAs of 5/6/2014, the most recent Windows version of Yahoo Messenger doesn't encrypt webcam feeds. See Appendix B for more details on past versions.\r\n\r\nNote that Yahoo also offers clients for Mac, iPhone, and Android.\r\n\r\n![myalt](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/images/yahoo_optic_nerve_timeline_retouched.png)\r\n\r\n## Appendix A - Yahoo Messenger v9.0.2018 Screenshots\r\n\r\n![myalt](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/images/9001912_invite_rxd.png)\r\n\r\n***\r\n\r\n![myalt](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/images/9001912_login.png)\r\n\r\n***\r\n\r\n![myalt](http://tyleroderkirk.github.io/optic_nerve_yahoo_capture/images/9002018_invite_friend_to_view_webcam.png)\r\n\r\n### Appendix B - Historic versions of the Yahoo Messenger client\r\nI have mirrored all the above installers in [this Google drive folder](https://drive.google.com/folderview?id=0BzoAun5526HhWDN2aUNCeUMtc28&usp=sharing). Most of them were originally retrieved from [Oldversion.com](http://www.oldversion.com/). \r\n\r\n","google":"UA-50714982-1","note":"Don't delete this file! It's used internally to help with page regeneration."}